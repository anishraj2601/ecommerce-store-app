// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  name         String?
  role         Role     @default(CUSTOMER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  addresses Address[]
  cartItems CartItem[]
  orders    Order[]

  @@map("users")
}

model Address {
  id           String  @id @default(cuid())
  userId       String
  firstName    String
  lastName     String
  company      String?
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  phone        String?
  isDefault    Boolean @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Category {
  id       String  @id @default(cuid())
  name     String
  slug     String  @unique
  parentId String?

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id           String   @id @default(cuid())
  title        String
  slug         String   @unique
  description  String?
  price        Decimal  @db.Decimal(10, 2)
  salePrice    Decimal? @db.Decimal(10, 2)
  sku          String   @unique
  inventory    Int      @default(0)
  categoryId   String
  images       Json     @default("[]")
  defaultImage String?
  attributes   Json     @default("{}")
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  category  Category   @relation(fields: [categoryId], references: [id])
  cartItems CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

model CartItem {
  id            String   @id @default(cuid())
  userId        String?
  sessionId     String?
  productId     String
  quantity      Int      @default(1)
  priceSnapshot Decimal  @db.Decimal(10, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@unique([sessionId, productId])
  @@map("cart_items")
}

model Order {
  id                String      @id @default(cuid())
  userId            String
  orderNumber       String      @unique
  status            OrderStatus @default(PENDING)
  total             Decimal     @db.Decimal(10, 2)
  subtotal          Decimal     @db.Decimal(10, 2)
  tax               Decimal     @db.Decimal(10, 2) @default(0)
  shipping          Decimal     @db.Decimal(10, 2) @default(0)
  stripePaymentId   String?
  shippingAddress   Json
  billingAddress    Json?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id            String  @id @default(cuid())
  orderId       String
  productId     String
  quantity      Int
  priceSnapshot Decimal @db.Decimal(10, 2)
  productTitle  String
  productImage  String?

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
